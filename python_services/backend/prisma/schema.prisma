// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  username     String?  @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(USER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLogin    DateTime? @map("last_login")
  preferences  Json     @default("{}")

  // Relations
  userReports    UserReport[]
  reviewedReports UserReport[] @relation("ReportReviewer")
  aiTrainingData AiTrainingData[]
  chatSessions   ChatSession[]

  @@map("users")
}

model ScamUrl {
  id            String   @id @default(uuid()) @db.Uuid
  urlHash       String   @unique @map("url_hash")
  originalUrl   String   @map("original_url")
  domain        String
  threatType    String   @map("threat_type")
  confidence    Decimal  @db.Decimal(3, 2) @default(0.8)
  source        String
  tags          String[]
  metadata      Json     @default("{}")
  firstSeen     DateTime @default(now()) @map("first_seen")
  lastSeen      DateTime @default(now()) @map("last_seen")
  reportCount   Int      @default(1) @map("report_count")
  isActive      Boolean  @default(true) @map("is_active")
  aiConfidence  Decimal? @map("ai_confidence") @db.Decimal(3, 2)
  mlFeatures    Json     @default("{}") @map("ml_features")
  embedding     Unsupported("vector(1536)")?

  // Relations
  userReports     UserReport[]
  detectionHistory DetectionHistory[]
  aiTrainingData  AiTrainingData[]

  @@map("scam_urls")
}

model UserReport {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String?  @db.Uuid @map("user_id")
  urlHash      String   @map("url_hash")
  originalUrl  String   @map("original_url")
  description  String?
  reportType   String   @default("scam") @map("report_type")
  status       ReportStatus @default(PENDING)
  createdAt    DateTime @default(now()) @map("created_at")
  reviewedAt   DateTime? @map("reviewed_at")
  reviewedBy   String?  @db.Uuid @map("reviewed_by")
  aiAnalysis   Json     @default("{}") @map("ai_analysis")
  userMetadata Json     @default("{}") @map("user_metadata")

  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  reviewer    User?    @relation("ReportReviewer", fields: [reviewedBy], references: [id])
  scamUrl     ScamUrl? @relation(fields: [urlHash], references: [urlHash])

  @@map("user_reports")
}

model DetectionHistory {
  id              String   @id @default(uuid()) @db.Uuid
  urlHash         String   @map("url_hash")
  originalUrl     String   @map("original_url")
  threatLevel     String   @map("threat_level")
  confidence      Decimal  @db.Decimal(3, 2) @map("confidence")
  detectionMethods String[] @map("detection_methods")
  isSuspicious    Boolean  @map("is_suspicious")
  responseTimeMs  Int?     @map("response_time_ms")
  userAgent       String?  @map("user_agent")
  ipAddress       String?  @map("ip_address") @db.Inet
  sessionId       String?  @map("session_id")
  timestamp       DateTime @default(now())
  aiPrediction    Json     @default("{}") @map("ai_prediction")

  // Relations
  scamUrl ScamUrl? @relation(fields: [urlHash], references: [urlHash])

  @@map("detection_history")
}

model AiTrainingData {
  id                String   @id @default(uuid()) @db.Uuid
  urlHash           String   @map("url_hash")
  originalUrl       String   @map("original_url")
  contentText       String?  @map("content_text")
  htmlContent       String?  @map("html_content")
  screenshotPath    String?  @map("screenshot_path")
  features          Json
  label             String
  confidence        Decimal? @db.Decimal(3, 2)
  modelVersion      String?  @map("model_version")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  isVerified        Boolean  @default(false) @map("is_verified")
  verifiedBy        String?  @db.Uuid @map("verified_by")

  // Relations
  scamUrl ScamUrl? @relation(fields: [urlHash], references: [urlHash])
  verifier User?   @relation(fields: [verifiedBy], references: [id])

  @@map("ai_training_data")
}

model KnowledgeBase {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  content     String
  contentType String   @map("content_type")
  embedding   Unsupported("vector(1536)")?
  tags        String[]
  language    String   @default("en")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isActive    Boolean  @default(true) @map("is_active")
  metadata    Json     @default("{}")

  @@map("knowledge_base")
}

model ChatSession {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String?  @db.Uuid @map("user_id")
  sessionId     String   @unique @map("session_id")
  startedAt     DateTime @default(now()) @map("started_at")
  endedAt       DateTime? @map("ended_at")
  totalMessages Int      @default(0) @map("total_messages")
  sessionData   Json     @default("{}") @map("session_data")

  // Relations
  user     User?          @relation(fields: [userId], references: [id])
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id              String   @id @default(uuid()) @db.Uuid
  sessionId       String   @map("session_id")
  messageType     MessageType @map("message_type")
  content         String
  timestamp       DateTime @default(now())
  intent          String?
  confidence      Decimal? @db.Decimal(3, 2)
  entities        Json     @default("{}")
  responseTimeMs  Int?     @map("response_time_ms")
  userSatisfaction Int?    @map("user_satisfaction")

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [sessionId])

  @@map("chat_messages")
}

model ApiStatus {
  id             String   @id @default(uuid()) @db.Uuid
  apiName        String   @map("api_name")
  status         String
  lastCheck      DateTime @default(now()) @map("last_check")
  errorMessage   String?  @map("error_message")
  responseTimeMs Int?     @map("response_time_ms")
  successRate    Decimal? @map("success_rate") @db.Decimal(5, 2)
  dailyRequests  Int      @default(0) @map("daily_requests")

  @@map("api_status")
}

model ModelMetric {
  id                      String   @id @default(uuid()) @db.Uuid
  modelName               String   @map("model_name")
  modelVersion            String   @map("model_version")
  metricType              String   @map("metric_type")
  metricValue             Decimal  @map("metric_value") @db.Decimal(5, 4)
  datasetSize             Int?     @map("dataset_size")
  trainingDurationMinutes Int?     @map("training_duration_minutes")
  timestamp               DateTime @default(now())
  metadata                Json     @default("{}")

  @@map("model_metrics")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ReportStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
}

enum MessageType {
  USER
  BOT
  SYSTEM
} 