#!/usr/bin/env python3
"""
URLhaus API Setup Script for PhishGuard
"""

import os
import sys
import requests
from config import Config, print_env_help

def get_urlhaus_auth_key():
    """Guide user through getting URLhaus auth key"""
    print("üîë URLhaus API Setup")
    print("=" * 50)
    print()
    print("URLhaus API requires a free authentication key.")
    print("Follow these steps to get your key:")
    print()
    print("1. Visit: https://urlhaus.abuse.ch/api/")
    print("2. Click on 'abuse.ch Authentication Portal'")
    print("3. Create a free account")
    print("4. Generate an Auth-Key")
    print("5. Copy the key and use it below")
    print()
    
    auth_key = input("Enter your URLhaus Auth-Key (or press Enter to skip): ").strip()
    
    if not auth_key:
        print("‚ö†Ô∏è  URLhaus API will be disabled. You can still use other detection methods.")
        return None
    
    # Test the auth key
    print("Testing your auth key...")
    if test_urlhaus_auth_key(auth_key):
        print("‚úÖ Auth key is valid!")
        return auth_key
    else:
        print("‚ùå Invalid auth key. Please check and try again.")
        return None

def test_urlhaus_auth_key(auth_key: str) -> bool:
    """Test if the URLhaus auth key is valid"""
    try:
        headers = {
            'Auth-Key': auth_key,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        # Test with a known safe URL
        data = {
            'url': 'https://www.google.com'
        }
        
        response = requests.post(
            'https://urlhaus-api.abuse.ch/v1/url/',
            headers=headers,
            data=data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get('query_status') in ['ok', 'no_results']
        
        return False
        
    except Exception as e:
        print(f"Error testing auth key: {str(e)}")
        return False

def save_auth_key(auth_key: str):
    """Save auth key to environment file"""
    env_file = '.env'
    
    # Read existing .env file if it exists
    env_vars = {}
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    
    # Update or add URLHAUS_AUTH_KEY
    env_vars['URLHAUS_AUTH_KEY'] = auth_key
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# PhishGuard Environment Variables\n")
        f.write("# Generated by setup_urlhaus.py\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"‚úÖ Auth key saved to {env_file}")
    print("‚ö†Ô∏è  Remember to add .env to your .gitignore file!")

def setup_environment():
    """Set up environment for URLhaus"""
    print("üåç Environment Setup")
    print("=" * 30)
    print()
    
    # Check if .env file exists
    if os.path.exists('.env'):
        print("Found existing .env file")
        with open('.env', 'r') as f:
            content = f.read()
            if 'URLHAUS_AUTH_KEY' in content:
                print("‚úÖ URLHAUS_AUTH_KEY already configured")
                return True
    
    # Get auth key from user
    auth_key = get_urlhaus_auth_key()
    
    if auth_key:
        save_auth_key(auth_key)
        return True
    
    return False

def test_integration():
    """Test URLhaus integration"""
    print("üß™ Testing URLhaus Integration")
    print("=" * 35)
    print()
    
    try:
        from app.phish_core import PhishGuardCore
        
        # Initialize with auth key
        auth_key = os.getenv('URLHAUS_AUTH_KEY')
        if not auth_key:
            print("‚ùå No URLHAUS_AUTH_KEY found in environment")
            return False
        
        phish_guard = PhishGuardCore(urlhaus_auth_key=auth_key)
        
        # Test with a safe URL
        print("Testing with safe URL: https://www.google.com")
        result = phish_guard.analyze_url('https://www.google.com')
        print(f"Result: {result['threat_level']} - {result['message']}")
        
        # Test with a suspicious URL
        print("\nTesting with suspicious URL: https://bit.ly/suspicious-link")
        result = phish_guard.analyze_url('https://bit.ly/suspicious-link')
        print(f"Result: {result['threat_level']} - {result['message']}")
        
        if 'urlhaus' in result.get('detection_methods', []):
            print("‚úÖ URLhaus integration is working!")
        else:
            print("‚ÑπÔ∏è  URLhaus integration is configured but not triggered for these URLs")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing integration: {str(e)}")
        return False

def main():
    """Main setup function"""
    print("üõ°Ô∏è  PhishGuard URLhaus Setup")
    print("=" * 40)
    print()
    
    # Show current configuration
    Config.print_config()
    
    # Setup environment
    if setup_environment():
        print("‚úÖ Environment setup completed")
    else:
        print("‚ö†Ô∏è  Environment setup skipped")
    
    print()
    
    # Test integration
    if test_integration():
        print("‚úÖ URLhaus integration is ready!")
    else:
        print("‚ùå URLhaus integration failed")
    
    print()
    print("üìã Next Steps:")
    print("1. Start the API server: python -m app.api")
    print("2. Test with CLI: python -m app.cli analyze <url>")
    print("3. Run demo: python demo.py")
    print()
    print("üìö For more information:")
    print("   ‚Ä¢ URLhaus API docs: https://urlhaus-api.abuse.ch/")
    print("   ‚Ä¢ PhishGuard docs: README.md")

if __name__ == "__main__":
    main() 